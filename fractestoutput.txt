Project#2: Fraction class (ADT) client program to test CLASS INVARIANT
There are two data members used to represent the denominator and numerator
for each instance of a Fraction class object class.
The client code provides an interface to test correct operations on fraction
objects that are negative, improper (larger numerator than denominator),
or whole numbers (denominator of 1).
Here is a list of test types and order in which the tests will be conducted
1. BasicTest
2. RelationTest
3. BinaryMathTest
4. MathAssignTest

***********************************************************************
* Basic Test: Testing member constructor, simplify() and nonmember    *
* friend ostream << operator for basic Fraction object creation &     *
* printing(Fractions should be in reduced form, and as mixed numbers.)*
***********************************************************************
Fraction [0] = 1/2
Fraction [1] = -5/7
Fraction [2] = 10
Fraction [3] = -4
Fraction [4] = 0
Fraction [5] = 4+2/3
Fraction [6] = 0

***********************************************************************
* Basic Test: Testing simplify() and nonmember friend istream >> and  *
* ostream << operators for reading and display of Fraction objects    *
* from data file                                                      *
***********************************************************************
Enter file name with fraction data to read: frac.txt
frac.txt not found!
Make sure the fraction data file to read is in the project folder.
Enter file name with fraction data to read: frac_data.txt
Read Fraction = -1/3
Read Fraction = 1/2
Read Fraction = 3/4
Read Fraction = -4/5
Read Fraction = 6
Read Fraction = 5
Read Fraction = -8
Read Fraction = 1+2/5
Read Fraction = -16+2/3
Read Fraction = 1+1/4
Read Fraction = 2
Read Fraction = -4+1/4
Read Fraction = -10+5/6

***********************************************************************
* RelationTest: Testing nonmember friend binary Boolean <, <=, >, >=, *
*  ==, != relational operators between Fractions                      *
***********************************************************************
Comparing 1/2 to -1/2
        Is left < right? false
        Is left <= right? false
        Is left > right? true
        Is left >= right? true
        Does left == right? false
        Does left != right ? true
Comparing -1/2 to 1/2
        Is left < right? true
        Is left <= right? true
        Is left > right? false
        Is left >= right? false
        Does left == right? false
        Does left != right ? true
Comparing 1/2 to 1/10
        Is left < right? false
        Is left <= right? false
        Is left > right? true
        Is left >= right? true
        Does left == right? false
        Does left != right ? true
Comparing 1/10 to 0
        Is left < right? false
        Is left <= right? false
        Is left > right? true
        Is left >= right? true
        Does left == right? false
        Does left != right ? true
Comparing 0 to 0
        Is left < right? false
        Is left <= right? true
        Is left > right? false
        Is left >= right? true
        Does left == right? true
        Does left != right ? false

***********************************************************************
* RelationTest: Testing nonmember friend binary Boolean <, <=, >, >=, *
* ==, != relations between Fractions and integers                     *
***********************************************************************
Comparing -1/2 to 2
        Is left < right? true
        Is left <= right? true
        Is left > right? false
        Is left >= right? false
        Does left == right? false
        Does left != right ? true
Comparing -3 to 1/4
        Is left < right? true
        Is left <= right? true
        Is left > right? false
        Is left >= right? false
        Does left == right? false
        Does left != right ? true

***********************************************************************
* BinaryMathTest: Testing nonmember friend binary arithmetic +, -, *, *
* / operators between Fractions                                       *
***********************************************************************
1/6 + 1/3 = 1/2
1/6 - 1/3 = -1/6
1/6 * 1/3 = 1/18
1/6 / 1/3 = 1/2
1/3 + -2/3 = -1/3
1/3 - -2/3 = 1
1/3 * -2/3 = -2/9
1/3 / -2/3 = -1/2
-2/3 + 5 = 4+1/3
-2/3 - 5 = -5+2/3
-2/3 * 5 = -3+1/3
-2/3 / 5 = -2/15
5 + -1+1/3 = 3+2/3
5 - -1+1/3 = 6+1/3
5 * -1+1/3 = -6+2/3
5 / -1+1/3 = -3+3/4

***********************************************************************
* BinaryMathTest: Testing nonmember friend binary arithmetic +, -, *, *
* / operators between Fractions and integers                          *
***********************************************************************
-1/2 + 4 = 3+1/2
-1/2 - 4 = -4+1/2
-1/2 * 4 = -2
-1/2 / 4 = -1/8
3 + -1/2 = 2+1/2
3 - -1/2 = 3+1/2
3 * -1/2 = -1+1/2
3 / -1/2 = -6

***********************************************************************
* MathAssignTest: Testing member shorthand arithmetic assignment +=,  *
* -=, *=, /= operators on Fractions                                   *
***********************************************************************
1/6 += 4 = 4+1/6
4+1/6 -= 4 = 1/6
1/6 *= 4 = 2/3
2/3 /= 4 = 1/6
4 += -1/2 = 3+1/2
3+1/2 -= -1/2 = 4
4 *= -1/2 = -2
-2 /= -1/2 = 4
-1/2 += 5 = 4+1/2
4+1/2 -= 5 = -1/2
-1/2 *= 5 = -2+1/2
-2+1/2 /= 5 = -1/2

***********************************************************************
* MathAssignTest: Testing member shorthand arithmetic assignment +=,  *
* -=, *=, /= operators using integers                                 *
***********************************************************************
-1/3 += 3 = 2+2/3
2+2/3 -= 3 = -1/3
-1/3 *= 3 = -1
-1 /= 3 = -1/3

***********************************************************************
* MathAssignTest: Testing member increment/decrement prefix and       *
* postfix operators                                                   *
***********************************************************************
Now g = -1/3
g++ = -1/3
Now g = 2/3
++g = 1+2/3
Now g = 1+2/3
g-- = 1+2/3
Now g = 2/3
--g = -1/3
Now g = -1/3

Project#2 -Fraction class (ADT) testing now concluded.
Check output for correct results from the Fraction class (ADT) implementation.

Process returned 0 (0x0)   execution time : 23.247 s
Press any key to continue.
